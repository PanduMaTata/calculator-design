import tkinter as tk


class Abacus:
    def __init__(self, master):
        self.master = master
        self.master.title("Abacus Simulator")

        # Initialize values
        self.value = 0

        # Create UI elements
        self.create_abacus()
        self.create_controls()
        self.update_abacus()

    def create_abacus(self):
        self.canvas = tk.Canvas(self.master, width=400, height=300, bg="lightblue")
        self.canvas.pack()

        self.rods = []
        for i in range(10):
            rod = self.canvas.create_line(40 + i * 30, 50, 40 + i * 30, 250, width=2)
            self.rods.append(rod)

        self.beads = []
        for i in range(10):
            bead = self.canvas.create_oval(30 + i * 30, 200, 50 + i * 30, 230, fill="red")
            self.beads.append(bead)

    def create_controls(self):
        control_frame = tk.Frame(self.master)
        control_frame.pack()

        self.value_entry = tk.Entry(control_frame)
        self.value_entry.pack(side=tk.LEFT)

        add_button = tk.Button(control_frame, text="Add", command=self.add_value)
        add_button.pack(side=tk.LEFT)

        subtract_button = tk.Button(control_frame, text="Subtract", command=self.subtract_value)
        subtract_button.pack(side=tk.LEFT)

        reset_button = tk.Button(control_frame, text="Reset", command=self.reset_value)
        reset_button.pack(side=tk.LEFT)

    def update_abacus(self):
        for i in range(10):
            if i < self.value:
                self.canvas.coords(self.beads[i], 30 + i * 30, 150, 50 + i * 30, 180)
            else:
                self.canvas.coords(self.beads[i], 30 + i * 30, 200, 50 + i * 30, 230)

    def add_value(self):
        try:
            amount = int(self.value_entry.get())
            self.value += amount
            self.value = min(self.value, 10)  # Limit to 10 beads
            self.update_abacus()
        except ValueError:
            pass

    def subtract_value(self):
        try:
            amount = int(self.value_entry.get())
            self.value -= amount
            self.value = max(self.value, 0)  # Limit to 0 beads
            self.update_abacus()
        except ValueError:
            pass

    def reset_value(self):
        self.value = 0
        self.update_abacus()


if __name__ == "__main__":
    root = tk.Tk()
    abacus = Abacus(root)
    root.mainloop()
